DESCRIPTION

    This command will execute each specified algorithm using a k-fold cross-validation strategy. It will perform classification and feature selection. It will use nested cross validation for algorithm selection and to select features and to optimize the number of selected features. It will output the predictive performance and selected features for each algorithm for the inner (nested) folds and will use a select-best method to make predictions for the outer folds.

REQUIRED ARGUMENTS

    --data [file_path]
    --description [description]
    --outer-iterations [number]
    --inner-iterations [number]
    --classif-algo [file_path]
    --fs-algo [file_path]
    --num-features [file_path]
    --output-dir [dir_path]

OPTIONAL ARGUMENT

    --verbose

NOTES

    The --data argument allows you to specify input data files in one of the supported formats. The GitHub page provides details on these formats.

    The --description value should be a user-friendly description of the analysis that will be performed. This description will be specified in the output files.

    The --classif-algo argument allows you to specify classification algorithm(s) to be used in the analysis. The value(s) should be a relative path to a script specified under AlgorithmScripts. See the GitHub site for available algorithms.

    The --fs-algo argument allows you to specify feature-selection algorithm(s) to be used in the analysis. The value(s) should be a relative path to a script specified under AlgorithmScripts. See the GitHub site for available algorithms.

    The --data, --classif-algo, and --fs-algo arguments must be used at least once but could be used multiple times. Wildcards may be used (in quotations).

    The --num-features argument should be used once. Multiple values should be separated by commas.

    The --outer-iterations and --inner-iterations values must be positive integers. These values indicate the number of times that cross-validation should be performed. The inner iterations are used for algorithm selection, while the outer iterations are used to assess generalizability of the selected models.

    The --output-dir argument allows you to indicate where output files will be stored. If this file does not already exist, ShinyLearner will create it. For information about the output files that will be created, see the GitHub site.

    If the --verbose flag is specified, extra information will be printed to standard out. This flag is typically used for debugging purposes.
