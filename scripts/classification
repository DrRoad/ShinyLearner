#!/bin/bash

set -euo pipefail

source scripts/shared_functions

analysisDataFile="$1"
description="$2"
numIterations="$3"
verbose="$4"
classifAlgos="$5"
outPredictionsFile="$6"
outMetricsFile="$7"
outBenchmarkFile="$8"
validationType="${9}"
randomSeed="${10}"
ohe="${11}"
tmpDir="${12}"

source scripts/setup

idFile=$tmpDir/id
classFile=$tmpDir/cl
trainTestFile=$tmpDir/tt
trainTestFile2=$tmpDir/tt2

python scripts/ExtractSampleInfo.py "$analysisDataFile" "$description" $idFile $classFile
python scripts/AssignTrainingTesting.py $idFile $classFile $iterationOutputHeader $trainTestFile $numIterations $randomSeed

python scripts/AddAlgorithmScripts.py $trainTestFile "$classifAlgos" $trainTestFile2

echo "Starting classification..."
java -Xmx${mem} -jar shinylearner.jar ANALYSIS_DATA_FILE="$analysisDataFile" EXPERIMENT_FILE=$trainTestFile2 OUTPUT_PREDICTIONS_FILE_PATH="$tmpDir/op0" OUTPUT_BENCHMARK_FILE_PATH="$tmpDir/ob" DEBUG=$verbose TEMP_DIR=$tmpDir 2> /dev/null

numClassifAlgos=$(python scripts/CountUniqueValues.py $trainTestFile2 -1 False)
if (( numClassifAlgos > 1 ))
then
  echo "Making aggregate predictions..."
  Rscript --vanilla scripts/MajorityVote.R "$tmpDir/op0" "$tmpDir/op"
else
  cp "$tmpDir/op0" "$tmpDir/op"
fi

echo "Calculating classification metrics..."
Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/op" "$tmpDir/om"

function parseOutputFile {
  if [ -f "$1" ]
  then
    python scripts/ParseNonNestedResults.py $1 "$iterationOutputHeader" $1.sorttemp
    sortFile $1.sorttemp "-k1,1 -k2,2n -k3" "$2"
  fi
}

echo "Preparing output files..."
parseOutputFile $tmpDir/op "$outPredictionsFile"
parseOutputFile $tmpDir/om "$outMetricsFile"
parseOutputFile $tmpDir/ob "$outBenchmarkFile"
