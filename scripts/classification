#!/bin/bash

set -euo pipefail

dataFiles="$1"
description="$2"
numIterations="$3"
debug="$4"
classifAlgos="$5"
outPredictionsFile="$6"
outMetricsFile="$7"
outBenchmarkFile="$8"
validationType="${9}"
randomSeed="${10}"

function checkParam {
  value="$1"
  messageDescription="$2"

  if [ "$value" == "" ]
  then
    echo "No value was specified for $messageDescription."
    exit 1
  fi
}

checkParam "$dataFiles" "data files"
checkParam "$description" "description"
checkParam "$numIterations" "number of iterations"
checkParam "$debug" "debug"
checkParam "$classifAlgos" "classification algorithm(s)"
checkParam "$validationType" "validation type"

if [[ "$validationType" != "montecarlo" ]]
then
  if [[ "$validationType" != "crossvalidation" ]]
  then
    echo "Invalid validation type: ${validationType}."
    exit 1
  fi
fi

classPath=lib/paldb.jar

tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')

function cleanup {
  rm -rf $tmpDir
}

cleanup
mkdir -p $tmpDir
source scripts/helper

trap cleanup INT TERM EXIT

idFile=$tmpDir/id
classFile=$tmpDir/cl
trainTestFile=$tmpDir/tt
trainTestFile2=$tmpDir/tt2

python scripts/IdentifySamples.py "$dataFiles" "$description" $idFile $classFile

if [[ "$validationType" == "montecarlo" ]]
then
  python scripts/AssignTrainingTesting.py $idFile $classFile Iteration $trainTestFile $numIterations $randomSeed
  iterationOutputHeader=Iteration
else
  python scripts/AssignCrossValidation.py $idFile $classFile Fold $trainTestFile $numIterations $randomSeed
  iterationOutputHeader=Fold
fi

python scripts/AddAlgorithmScripts.py $trainTestFile "$classifAlgos" $trainTestFile2

mem=$(getMemAvailable)

java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES="$dataFiles" EXPERIMENT_FILE=$trainTestFile2 OUTPUT_PREDICTIONS_FILE_PATH="$tmpDir/op0" OUTPUT_BENCHMARK_FILE_PATH="$tmpDir/ob" DEBUG=$debug TEMP_DIR=$tmpDir

Rscript --vanilla scripts/MajorityVote.R "$tmpDir/op0" "$tmpDir/op"
Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/op" "$tmpDir/om"

function parseOutputFile {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNonNestedResults.py $1 "$iterationOutputHeader" "$2"
  fi
}

parseOutputFile $tmpDir/op "$outPredictionsFile"
parseOutputFile $tmpDir/om "$outMetricsFile"
parseOutputFile $tmpDir/ob "$outBenchmarkFile"

cleanup
