#!/bin/bash

set -o errexit

#ssh srp33,mlflex@shell.sourceforge.net create
#ssh srp33,mlflex@shell.sourceforge.net
#exit

#releaseNew=NO
releaseNew=YES

thisDir=`pwd`
sourceDir=$thisDir
tempDir=$thisDir/Temp
mlflexDir=$tempDir/ML-Flex
gitUrl="git@github.com:srp33/ML-Flex.git"

##git remote add origin $gitUrl

mkdir -p $mlflexDir
rm -rf $mlflexDir

rm -rf $tempDir
mkdir -p $tempDir
cd $tempDir

if [ "$releaseNew" = "YES" ]
then
  git clone $gitUrl
  rm -rf ML-Flex/*
fi

mkdir -p $mlflexDir/Internals/CLibraries
mkdir -p $mlflexDir/Config
mkdir -p $mlflexDir/Experiments
mkdir -p $mlflexDir/Internals/Html
mkdir -p $mlflexDir/Internals/Java
mkdir -p $mlflexDir/Internals/Python
mkdir -p $mlflexDir/Internals/R
mkdir -p $mlflexDir/Tutorials

cp $sourceDir/README $mlflexDir/
cp $sourceDir/CLibraries/README $mlflexDir/Internals/CLibraries/
cp $sourceDir/CLibraries/sample.c $mlflexDir/Internals/CLibraries/
cp $sourceDir/CLibraries/compile $mlflexDir/Internals/CLibraries/
cp $sourceDir/Config/Learner_Templates.txt $mlflexDir/Config/
cp $sourceDir/Config/Classification_Algorithms.txt $mlflexDir/Config/
cp $sourceDir/Config/Feature_Selection_Algorithms.txt $mlflexDir/Config/
cp $sourceDir/Config/README $mlflexDir/Config/
cp -r $sourceDir/Experiments/* $mlflexDir/Experiments/
cp $sourceDir/Html/Header.html $mlflexDir/Internals/Html/
cp $sourceDir/Html/Footer.html $mlflexDir/Internals/Html/
cp $sourceDir/Html/Logo.gif $mlflexDir/Internals/Html/
#cp -r $sourceDir/Java/* $mlflexDir/Internals/Java/
#cp -rv ~/Dropbox/Eclipse/mlflex/src/builddir/src/mlflex/* $mlflexDir/Internals/Java/
cp -rv ~/Dropbox/Eclipse/mlflex/src/mlflex/* $mlflexDir/Internals/Java/
rm -rf $mlflexDir/Internals/Java/out
rm -rf $mlflexDir/Internals/Java/META-INF
rm -rf $mlflexDir/Internals/Java/lib
cp $sourceDir/LICENSE $mlflexDir/
cp $sourceDir/LICENSE $mlflexDir/Internals/Java/
cp $sourceDir/LICENSE $mlflexDir/Internals/Python/
cp $sourceDir/LICENSE $mlflexDir/Internals/R/
cp $sourceDir/Python/OrangeExec.py $mlflexDir/Internals/Python/
cp $sourceDir/Python/Demo*.py $mlflexDir/Internals/Python/
cp $sourceDir/Python/README $mlflexDir/Internals/Python/
cp $sourceDir/R/README $mlflexDir/Internals/R/
cp $sourceDir/R/Predict.R $mlflexDir/Internals/R/
cp $thisDir/scripts/build $mlflexDir/Internals/
cp $thisDir/scripts/build.xml $mlflexDir/Internals/
cp $thisDir/scripts/run $mlflexDir/
cp $thisDir/scripts/update_jar $mlflexDir/Internals/
cp $thisDir/release/Version.txt $mlflexDir/
cp $thisDir/.gitignore $mlflexDir/

cd $mlflexDir

function addLicenseToSourceFile {
  tmpFile=/tmp/Header.txt
  cp $sourceDir/LicenseSourceFileHeader.txt $tmpFile
  sed -i -e "s/^/$2/" $tmpFile
  echo "" >> $tmpFile
  cat $1 >> $tmpFile
  mv $tmpFile $1
}

if [ "$releaseNew" = "YES" ]
then
  for f in `find . -name \*.java`
  do
    addLicenseToSourceFile $f "\/\/ "
  done

  for f in `find . -name \*.py`
  do
    addLicenseToSourceFile $f "# "
  done

  for f in `find . -name \*.R`
  do
    addLicenseToSourceFile $f "# "
  done
fi

cd $mlflexDir

if [ "$releaseNew" = "YES" ]
then
  #git add -A
  git add --all .
  git commit -m 'No comment'
  git push -u origin master
fi

#mkdir -p $mlflexDir/InputData/Metadata
#mkdir -p $mlflexDir/InputData/TCGA
mkdir -p $mlflexDir/InputData/UCI

cp $sourceDir/CLibraries/*.tgz $mlflexDir/Internals/CLibraries/
cp $sourceDir/InputData/README $mlflexDir/InputData/
#cp $sourceDir/Data/Metadata/README $mlflexDir/InputData/Metadata/
#cp $sourceDir/Data/Metadata/HG-U133A.na30.annot.csv $mlflexDir/InputData/Metadata/
#cp $sourceDir/Data/TCGA_README $mlflexDir/InputData/TCGA/README
#cp $sourceDir/Data/mRNA/Expression-Genes/BI__HT_HG-U133A/Level_3/*analysis.txt $mlflexDir/InputData/TCGA/
#cp $sourceDir/Data/Clinical/*public*.txt $mlflexDir/InputData/TCGA/
cp $sourceDir/InputData/UCI/* $mlflexDir/InputData/UCI/
cp $sourceDir/InputData/Delimited* $mlflexDir/InputData/
cp -r $sourceDir/logback.xml $mlflexDir/
#cp -r /Users/srp33/Dropbox/Eclipse/mlflex/lib $mlflexDir/Internals/
cp $sourceDir/Internals_README $mlflexDir/Internals/README
cp $thisDir/scripts/PackageNewVersion.py $tempDir/

cd $thisDir
./scripts/build "$releaseNew"
cp -r release/* $mlflexDir/
cd $mlflexDir

cat $sourceDir/Html/Header.html $sourceDir/Html/PublicDescription.html $sourceDir/Html/Footer.html > $tempDir/index.html

mkdir -p $tempDir/Tutorials
cp $mlflexDir/Internals/Html/Logo.gif $tempDir/Tutorials/
for f in $sourceDir/Tutorials/*.html
do
  cat $sourceDir/Html/Header.html $f $sourceDir/Tutorials/Table_Contents $sourceDir/Html/Footer.html > $tempDir/Tutorials/`basename $f`
done

if [ "$releaseNew" = "YES" ]
then
  rm -rf $tempDir/.git
  mv $mlflexDir/.git $tempDir/
  cd $tempDir
  python PackageNewVersion.py
  #mv .git $mlflexDir
  cd $tempDir
  COPYFILE_DISABLE=1; export COPYFILE_DISABLE
  tar -zcvf ML-Flex.tar.gz ML-Flex
  cp ML-Flex.tar.gz $thisDir/release/

  cd $mlflexDir

  #git commit -m 'New build created'
  #git push -u origin master

#  scp -r $tempDir/index.html srp33,mlflex@frs.sourceforge.net:/home/project-web/mlflex/htdocs/
#  scp -r $tempDir/Tutorials/* srp33,mlflex@frs.sourceforge.net:/home/project-web/mlflex/htdocs/tutorial/
#  scp -r $mlflexDir/Internals/Html/Logo.gif srp33,mlflex@frs.sourceforge.net:/home/project-web/mlflex/htdocs/
#  scp $sourceDir/Downloads_README srp33,mlflex@frs.sourceforge.net:/home/frs/project/m/ml/mlflex/README

  scp mlflex.jar srp33,mlflex@frs.sourceforge.net:/home/frs/project/m/ml/mlflex/jar/
  scp $tempDir/ML-Flex.tar.gz srp33,mlflex@frs.sourceforge.net:/home/frs/project/m/ml/mlflex/archive/ML-Flex_$(cat Version.txt).tar.gz
  scp $tempDir/ML-Flex.tar.gz srp33,mlflex@frs.sourceforge.net:/home/frs/project/m/ml/mlflex/
fi

#rm -rf $tempDir
