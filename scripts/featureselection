#!/bin/bash

set -euo pipefail

dataFiles="$1"
description="$2"
numIterations="$3"
debug="$4"
fsAlgos="$5"
outFeaturesFile="$6"
outSummarizedFeaturesFile="$7"
outBenchmarkFile="$8"
validationType="$9"
randomSeed="${10}"

function checkParam {
  value="$1"
  messageDescription="$2"

  if [ "$value" == "" ]
  then
    echo "No value was specified for $messageDescription."
    exit 1
  fi
}

checkParam "$dataFiles" "data files"
checkParam "$description" "description"
checkParam "$numIterations" "number of iterations"
checkParam "$debug" "debug"
checkParam "$fsAlgos" "feature selection algorithm(s)"
checkParam "$validationType" "validation type"

if [[ "$validationType" != "montecarlo" ]]
then
  if [[ "$validationType" != "crossvalidation" ]]
  then
    echo "Invalid validation type: ${validationType}."
    exit 1
  fi
fi

source scripts/helper
source scripts/sort_function

analysisDataFile=$tmpDir/data.gz
idFile=$tmpDir/id
classFile=$tmpDir/cl
trainTestFile=$tmpDir/tt
trainTestFile2=$tmpDir/tt2
mem=$(getMemAvailable)

echo "Preparing for analysis..."
java -Xmx${mem} -jar shinylearner.jar RAW_DATA_FILES="$dataFiles" ANALYSIS_DATA_FILE="$analysisDataFile" DEBUG=$debug TEMP_DIR=$tmpDir 2> /dev/null
python scripts/ExtractSampleInfo.py "$analysisDataFile" "$description" $idFile $classFile

if [[ "$validationType" == "montecarlo" ]]
then
  python scripts/AssignTrainingTesting.py $idFile $classFile $iterationOutputHeader $trainTestFile $numIterations $randomSeed
else
  python scripts/AssignCrossValidation.py $idFile $classFile $iterationOutputHeader $trainTestFile $numIterations $randomSeed
fi

python scripts/AddAlgorithmScripts.py $trainTestFile "$fsAlgos" $trainTestFile2

echo "Starting feature selection..."
java -Xmx${mem} -jar shinylearner.jar ANALYSIS_DATA_FILE="$analysisDataFile" EXPERIMENT_FILE=$trainTestFile2 OUTPUT_FEATURES_FILE_PATH="$tmpDir/of" OUTPUT_BENCHMARK_FILE_PATH="$tmpDir/ob" DEBUG=$debug TEMP_DIR=$tmpDir 2> /dev/null

function parseOutputFile {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNonNestedResults.py $1 $iterationOutputHeader $1.sorttemp
    sortFile $1.sorttemp "-k1,1 -k2,2n -k3" "$2"
  fi
}

echo "Preparing output files..."
parseOutputFile "$tmpDir/of" "$outFeaturesFile"
parseOutputFile "$tmpDir/ob" "$outBenchmarkFile"

if [[ "$outSummarizedFeaturesFile" != "" ]]
then
  echo "Summarizing feature ranks..."
  Rscript --vanilla scripts/BordaCountFeatures.R "$outFeaturesFile" "$outSummarizedFeaturesFile" 2> $errFile
  printError
fi

cleanup
