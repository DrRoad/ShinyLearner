#!/bin/bash

set -euo pipefail

dataFiles="$1"
description="$2"
outerNumIterations="$3"
innerNumIterations="$4"
debug="$5"
fsAlgos="$6"
numFeaturesOptions="$7"
classifAlgos="$8"
outSelectedFeaturesFile="$9"
outPredictionsFile="${10}"
outMetricsFile="${11}"
outNestedSelectedFeaturesFile="${12}"
outNestedSummarizedSelectedFeaturesFile="${13}"
outNestedPredictionsFile="${14}"
outNestedMetricsFile="${15}"
outNestedFeatureSelectionBenchmarkFile="${16}"
outNestedClassificationBenchmarkFile="${17}"
validationType="${18}"
randomSeed="${19}"

function checkParam {
  value="$1"
  messageDescription="$2"

  if [ "$value" == "" ]
  then
    echo "No value was specified for $messageDescription."
    exit 1
  fi
}

checkParam "$dataFiles" "data files"
checkParam "$description" "description"
checkParam "$outerNumIterations" "outer number of iterations"
checkParam "$innerNumIterations" "inner number of iterations"
checkParam "$debug" "debug"
checkParam "$fsAlgos" "feature selection algorithm(s)"
checkParam "$numFeaturesOptions" "number of features options"
checkParam "$classifAlgos" "classification algorithm(s)"
checkParam "$validationType" "validation type"

if [[ "$validationType" != "montecarlo" ]]
then
  if [[ "$validationType" != "crossvalidation" ]]
  then
    echo "Invalid validation type: ${validationType}."
    exit 1
  fi
fi

classPath=lib/paldb.jar

tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')

function cleanup {
  rm -rf $tmpDir
}

cleanup
mkdir -p $tmpDir
source scripts/helper

trap cleanup INT TERM EXIT

## Make training and testing assignments
python scripts/IdentifySamples.py "$dataFiles" "$description" $tmpDir/allid $tmpDir/classes

if [[ "$validationType" == "montecarlo" ]]
then
  python scripts/AssignTrainingTesting.py $tmpDir/allid $tmpDir/classes "Iteration" $tmpDir/ott $outerNumIterations $randomSeed
  python scripts/AssignTrainingTesting.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
  iterationOutputHeader=Iteration
else
  python scripts/AssignCrossValidation.py $tmpDir/allid $tmpDir/classes "Fold" $tmpDir/ott $outerNumIterations $randomSeed
  python scripts/AssignCrossValidation.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
  iterationOutputHeader=Fold
fi

## Prepare inner experiment files
python scripts/AddAlgorithmScripts.py $tmpDir/ie "$fsAlgos" $tmpDir/ie2
python scripts/AddAlgorithmScripts.py $tmpDir/ie "$classifAlgos" $tmpDir/ie3

mem=$(getMemAvailable)

## Select features for inner iterations
java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES="$dataFiles" EXPERIMENT_FILE=$tmpDir/ie2 OUTPUT_FEATURES_FILE_PATH="$tmpDir/if" OUTPUT_BENCHMARK_FILE_PATH="$tmpDir/ifb" DEBUG=$debug TEMP_DIR=$tmpDir 2> /dev/null

## Add selected features to inner classification files
python scripts/AppendInnerSelectedFeatures.py $tmpDir/if $tmpDir/ie3 "$numFeaturesOptions" $tmpDir/isftt

## Classify using selected features for inner iterations
java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/isftt DEBUG=$debug OUTPUT_BENCHMARK_FILE_PATH=$tmpDir/icb OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/ip TEMP_DIR=$tmpDir 2> /dev/null

## Calculate performance metrics for inner folds
Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/ip" "$tmpDir/im"

## Parse inner classification results
python scripts/ReformatInnerResults_FeatureSelection.py $tmpDir/im $tmpDir/ibrf

## Use "ensemble" approach to identify best combination of algorithms and number of features
Rscript --vanilla scripts/SelectBestInnerResults_FeatureSelection.R $tmpDir/ibrf $tmpDir/ott $tmpDir/ofse $tmpDir/onfe $tmpDir/ocle 2> $errFile
printError

## Select features on outer iterations
java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/ofse DEBUG=$debug OUTPUT_FEATURES_FILE_PATH=$tmpDir/of TEMP_DIR=$tmpDir 2> /dev/null

## Add selected features to outer classification files
python scripts/AppendOuterSelectedFeatures.py $tmpDir/of $tmpDir/ocle $tmpDir/onfe $tmpDir/ocle2

## Classify using selected features for outer iterations
java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/ocle2 DEBUG=$debug OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/op TEMP_DIR=$tmpDir 2> /dev/null

## Calculate performance metrics for outer folds
Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/op" "$tmpDir/om"

function parseOuterFileA {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults.py $1 $iterationOutputHeader $3 "$2"
  fi
}

function parseOuterFileB {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults_FeatureSelection.py $1 $iterationOutputHeader "$2"
  fi
}

function parseOuterFileC {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults_FeatureSelection3.py $1 $iterationOutputHeader "$2"
  fi
}

parseOuterFileC $tmpDir/ocle2 "$outSelectedFeaturesFile"
parseOuterFileB $tmpDir/op "$outPredictionsFile"
parseOuterFileB $tmpDir/om "$outMetricsFile"

function copyInnerFileA {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults2.py $1 $iterationOutputHeader "$2"
  fi
}

function copyInnerFileB {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults_FeatureSelection2.py $1 $iterationOutputHeader "$2"
  fi
}

copyInnerFileA $tmpDir/if "$outNestedSelectedFeaturesFile"
copyInnerFileB $tmpDir/ip "$outNestedPredictionsFile"
copyInnerFileB $tmpDir/im "$outNestedMetricsFile"
copyInnerFileA $tmpDir/ifb "$outNestedFeatureSelectionBenchmarkFile"
copyInnerFileB $tmpDir/icb "$outNestedClassificationBenchmarkFile"

if [[ "$outNestedSummarizedSelectedFeaturesFile" != "" ]]
then
  Rscript --vanilla scripts/BordaCountFeatures.R "$outNestedSelectedFeaturesFile" "$outNestedSummarizedSelectedFeaturesFile" 2> $errFile
  printError
fi

cleanup
