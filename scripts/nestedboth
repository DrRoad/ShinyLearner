#!/bin/bash

set -o errexit

dataFiles="$1"
description="$2"
outerNumIterations="$3"
innerNumIterations="$4"
debug="$5"
fsAlgos="$6"
numFeaturesOptions="$7"
classifAlgos="$8"
outSelectedFeaturesFile="$9"
outPredictionsFile="${10}"
outMetricsFile="${11}"
outFeatureSelectionBenchmarkFile="${12}"
outClassificationBenchmarkFile="${13}"
outNestedSelectedFeaturesFile="${14}"
outNestedPredictionsFile="${15}"
outNestedMetricsFile="${16}"
outNestedFeatureSelectionBenchmarkFile="${17}"
outNestedClassificationBenchmarkFile="${18}"
validationType="${19}"
randomSeed="${20}"

function checkParam {
  value="$1"
  messageDescription="$2"

  if [ "$value" == "" ]
  then
    echo "No value was specified for $messageDescription."
    exit 1
  fi
}

checkParam "$dataFiles" "data files"
checkParam "$description" "description"
checkParam "$outerNumIterations" "outer number of iterations"
checkParam "$innerNumIterations" "inner number of iterations"
checkParam "$debug" "debug"
checkParam "$fsAlgos" "feature selection algorithm(s)"
checkParam "$numFeaturesOptions" "number of features options"
checkParam "$classifAlgos" "classification algorithm(s)"
checkParam "$validationType" "validation type"

if [[ "$validationType" != "montecarlo" ]]
then
  if [[ "$validationType" != "crossvalidation" ]]
  then
    echo "Invalid validation type: ${validationType}."
    exit 1
  fi
fi

tmpDir=$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')

function cleanup {
  rm -rf $tmpDir
}

cleanup
mkdir -p $tmpDir

trap cleanup INT TERM EXIT

## Make training and testing assignments
python scripts/IdentifySamples.py "$dataFiles" "$description" $tmpDir/allid $tmpDir/classes

if [[ "$validationType" == "montecarlo" ]]
then
  python scripts/AssignTrainingTesting.py $tmpDir/allid $tmpDir/classes "Iteration" $tmpDir/ott $outerNumIterations $randomSeed
  python scripts/AssignTrainingTesting.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
  iterationOutputHeader=Iteration
else
  python scripts/AssignCrossValidation.py $tmpDir/allid $tmpDir/classes "Fold" $tmpDir/ott $outerNumIterations $randomSeed
  python scripts/AssignCrossValidation.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
  iterationOutputHeader=Fold
fi

## Prepare inner experiment files
python scripts/AddAlgorithmScripts.py $tmpDir/ie "$fsAlgos" $tmpDir/ie2
python scripts/AddAlgorithmScripts.py $tmpDir/ie "$classifAlgos" $tmpDir/ie3

## Find out amount of memory available
#mem=$(top -l 1 | awk '/PhysMem:/ {print $2}' | tr '[:upper:]' '[:lower:]')
mem=$(free -m | tail -n3 | awk '{print $2}' | head -n1)M # Gives total memory in MB (preferred over GB because it always rounds down)

## Select features for inner iterations
java -Xmx${mem} -jar shinylearner.jar DATA_FILES="$dataFiles" EXPERIMENT_FILE=$tmpDir/ie2 OUTPUT_FEATURES_FILE_PATH="$tmpDir/if" OUTPUT_BENCHMARK_FILE_PATH="$tmpDir/ifb" DEBUG=$debug TEMP_DIR=$tmpDir

## Add selected features to inner classification files
python scripts/AppendInnerSelectedFeatures.py $tmpDir/if $tmpDir/ie3 "$numFeaturesOptions" $tmpDir/isftt

## Classify using selected features for inner iterations
java -Xmx${mem} -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/isftt DEBUG=$debug OUTPUT_BENCHMARK_FILE_PATH=$tmpDir/icb OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/ip TEMP_DIR=$tmpDir
#########################
#OUTPUT_METRICS_FILE_PATH=$tmpDir/im 

## Parse inner classification results
python scripts/ReformatInnerResults_FeatureSelection.py $tmpDir/im $tmpDir/ibrf

## Use "ensemble" approach to identify best combination of algorithms and number of features
Rscript --vanilla scripts/SelectBestInnerResults_FeatureSelection.R $tmpDir/ibrf $tmpDir/ott $tmpDir/ofse $tmpDir/onfe $tmpDir/ocle

## Select features on outer iterations
java -Xmx${mem} -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/ofse DEBUG=$debug OUTPUT_BENCHMARK_FILE_PATH=$tmpDir/ofb OUTPUT_FEATURES_FILE_PATH=$tmpDir/of TEMP_DIR=$tmpDir

## Add selected features to outer classification files
python scripts/AppendOuterSelectedFeatures.py $tmpDir/of $tmpDir/ocle $tmpDir/onfe $tmpDir/ocle2

## Classify using selected features for outer iterations
java -Xmx${mem} -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/ocle2 DEBUG=$debug OUTPUT_BENCHMARK_FILE_PATH=$tmpDir/ocb OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/op TEMP_DIR=$tmpDir
############################
OUTPUT_METRICS_FILE_PATH=$tmpDir/om 

function parseOuterFileA {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults.py $1 $iterationOutputHeader "$2"
  fi
}

function parseOuterFileB {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults_FeatureSelection.py $1 $iterationOutputHeader "$2"
  fi
}

parseOuterFileA $tmpDir/of "$outSelectedFeaturesFile"
parseOuterFileB $tmpDir/op "$outPredictionsFile"
################parseOuterFileB $tmpDir/om "$outMetricsFile"
parseOuterFileA $tmpDir/ofb "$outFeatureSelectionBenchmarkFile"
parseOuterFileB $tmpDir/ocb "$outClassificationBenchmarkFile"

function copyInnerFileA {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults2.py $1 $iterationOutputHeader "$2"
  fi
}

function copyInnerFileB {
  if [[ "$2" != "" ]]
  then
    python scripts/ParseNestedResults_FeatureSelection2.py $1 $iterationOutputHeader "$2"
  fi
}

copyInnerFileA $tmpDir/if "$outNestedSelectedFeaturesFile"
copyInnerFileB $tmpDir/ip "$outNestedPredictionsFile"
################copyInnerFileB $tmpDir/im "$outNestedMetricsFile"
copyInnerFileA $tmpDir/ifb "$outNestedFeatureSelectionBenchmarkFile"
copyInnerFileB $tmpDir/icb "$outNestedClassificationBenchmarkFile"

cleanup
