#!/bin/bash

set -euo pipefail

dataFiles="$1"
description="$2"
outerNumIterations="$3"
innerNumIterations="$4"
debug="$5"
classifAlgos="$6"
outPredictionsFile="$7"
outMetricsFile="$8"
outNestedPredictionsFile="${9}"
outNestedMetricsFile="${10}"
outNestedBenchmarkFile="${11}"
validationType="${12}"
randomSeed="${13}"

function checkParam {
  value="$1"
  messageDescription="$2"

  if [ "$value" == "" ]
  then
    echo "No value was specified for $messageDescription."
    exit 1
  fi
}

checkParam "$dataFiles" "data files"
checkParam "$description" "description"
checkParam "$outerNumIterations" "outer number of iterations"
checkParam "$innerNumIterations" "inner number of iterations"
checkParam "$debug" "debug"
checkParam "$classifAlgos" "classification algorithm(s)"
#checkParam "$outPredictionsFile" "output predictions file"
#checkParam "$outMetricsFile" "output metrics file"
#checkParam "$outNestedPredictionsFile" "output nested predictions file"
#checkParam "$outNestedMetricsFile" "output nested metrics file"
#checkParam "$outNestedBenchmarkFile" "output nested benchmark file"
checkParam "$validationType" "validation type"

if [[ "$validationType" != "montecarlo" ]]
then
  if [[ "$validationType" != "crossvalidation" ]]
  then
    echo "Invalid validation type: ${validationType}."
    exit 1
  fi
fi

source scripts/helper

## Make training and testing assignments
python scripts/IdentifySamples.py "$dataFiles" "$description" $tmpDir/allid $tmpDir/classes

if [[ "$validationType" == "montecarlo" ]]
then
  python scripts/AssignTrainingTesting.py $tmpDir/allid $tmpDir/classes "$iterationOutputHeader" $tmpDir/ott $outerNumIterations $randomSeed
  python scripts/AssignTrainingTesting.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
else
  python scripts/AssignCrossValidation.py $tmpDir/allid $tmpDir/classes "$iterationOutputHeader" $tmpDir/ott $outerNumIterations $randomSeed
  python scripts/AssignCrossValidation.py $tmpDir/ott $tmpDir/classes "Inner" $tmpDir/ie $innerNumIterations $randomSeed
fi

## Prepare inner experiment files
python scripts/AddAlgorithmScripts.py $tmpDir/ie "$classifAlgos" $tmpDir/ie2

mem=$(getMemAvailable)

## Classify for inner iterations
java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/ie2 DEBUG=$debug OUTPUT_BENCHMARK_FILE_PATH=$tmpDir/icb OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/ip TEMP_DIR=$tmpDir 2> /dev/null

Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/ip" "$tmpDir/im"

## Parse inner classification results
python scripts/ReformatInnerResults_Classification.py $tmpDir/im $tmpDir/ibrf

## Use "ensemble" approach to identify best combination of algorithms
Rscript --vanilla scripts/SelectBestInnerResults_Classification.R $tmpDir/ibrf $tmpDir/ott $tmpDir/ocle 2> $errFile
printError

## Classify for outer iterations
java -Xmx${mem} -classpath "$classPath" -jar shinylearner.jar DATA_FILES=$dataFiles EXPERIMENT_FILE=$tmpDir/ocle DEBUG=$debug OUTPUT_PREDICTIONS_FILE_PATH=$tmpDir/op TEMP_DIR=$tmpDir 2> /dev/null

Rscript --vanilla scripts/CalculateClassificationMetrics.R "$tmpDir/op" "$tmpDir/om"

if [[ "$outPredictionsFile" != "" ]]
then
  python scripts/ParseNestedResults.py $tmpDir/op $iterationOutputHeader $tmpDir/op.sorttemp
  Rscript --vanilla scripts/SortFile.R $tmpDir/op.sorttemp Description,$iterationOutputHeader,Algorithm,InstanceID "$outPredictionsFile" 2> $errFile
  printError
fi
if [[ "$outMetricsFile" != "" ]]
then
  python scripts/ParseNestedResults.py $tmpDir/om $iterationOutputHeader $tmpDir/om.sorttemp
  Rscript --vanilla scripts/SortFile.R $tmpDir/om.sorttemp Description,$iterationOutputHeader,Algorithm,Metric "$outMetricsFile" 2> $errFile
  printError
fi

if [[ "$outNestedPredictionsFile" != "" ]]
then
  python scripts/ParseNestedResults2.py $tmpDir/ip $iterationOutputHeader $tmpDir/ip.sorttemp
  Rscript --vanilla scripts/SortFile.R $tmpDir/ip.sorttemp Description,Outer_${iterationOutputHeader},Inner_${iterationOutputHeader},Algorithm,InstanceID "$outNestedPredictionsFile" 2> $errFile
  printError
fi
if [[ "$outNestedMetricsFile" != "" ]]
then
  python scripts/ParseNestedResults2.py $tmpDir/im $iterationOutputHeader $tmpDir/im.sorttemp
  Rscript --vanilla scripts/SortFile.R $tmpDir/im.sorttemp Description,Outer_${iterationOutputHeader},Inner_${iterationOutputHeader},Algorithm,Metric "$outNestedMetricsFile" 2> $errFile
  printError
fi
if [[ "$outNestedBenchmarkFile" != "" ]]
then
  python scripts/ParseNestedResults2.py $tmpDir/icb $iterationOutputHeader $tmpDir/icb.sorttemp
  Rscript --vanilla scripts/SortFile.R $tmpDir/icb.sorttemp Description,Outer_${iterationOutputHeader},Inner_${iterationOutputHeader},Algorithm "$outNestedBenchmarkFile" 2> $errFile
  printError
fi

cleanup
