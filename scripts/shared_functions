#!/bin/bash

set -euo pipefail

#################################################
# Functions used across multiple scripts
#################################################

command_exists () {
    type "$1" &> /dev/null ;
}

## Find out amount of memory available
function getMemAvailable {
  if command_exists free
  then
    mem=$(free -m | tail -n3 | awk '{print $2}' | head -n1)M # Gives total memory in MB (preferred over GB because it always rounds down)
  else
    mem=$(top -l 1 | awk '/PhysMem:/ {print $2}' | tr '[:upper:]' '[:lower:]')
  fi

  echo "$mem"
}

function getTempDir {
  previousValue="$1"

  if [[ "$previousValue" == "" ]]
  then
    tmpDir="$(mktemp -d 2>/dev/null || mktemp -d -t 'mytmpdir')"
    echo "$tmpDir"
  else
    mkdir -p $previousValue
    tmpDir=$(mktemp $previousValue/XXXXXXXXX)
    rm $tmpDir
    mkdir -p $tmpDir
    echo "$tmpDir"
  fi
}

function cleanup {
  tmpDir="$1"

  rm -rf $tmpDir
}

function printError {
  debug=$1
  errFile=$2

  if [[ "$debug" == "true" ]]
  then
    cat $errFile
  fi
}

body() {
  # See http://unix.stackexchange.com/questions/11856/sort-but-keep-header-line-at-the-top
  IFS= read -r header
  printf '%s\n' "$header"
  "$@"
}

function sortFile {
  inSortFile="$1"
  sortCriteria="$2"
  outSortFile="$3"

  if [[ "$inSortFile" == "" ]]
  then
    echo No input sort file specified.
    exit 1
  fi
  if [[ "$sortCriteria" == "" ]]
  then
    echo No sort criteria specified.
    exit 1
  fi
  if [[ "$outSortFile" == "" ]]
  then
    echo No output sort file specified.
    exit 1
  fi

  cat "$inSortFile" | body sort $sortCriteria > $outSortFile
}

function checkParamParseOutput {
  value="$1"

  if [[ "$value" == ERROR* ]]
  then
    echo "$value"
    exit 1
  fi
}

function timestamp {
  python -c 'import sys,time;sys.stdout.write("".join(( " ".join((time.strftime("[%Y-%m-%d %H:%M:%S]", time.localtime()), line)) for line in sys.stdin )))'
}
